'use strict';

(function () {
    'use strict';

    angular.module('index', ['ui.router', 'ui.bootstrap', 'ngAnimate', 'ngSanitize', 'ngTouch', 'angularPromiseButtons']).config(config).run(["$state", "$rootScope", function ($state, $rootScope) {
        $rootScope.$state = $state;
        $rootScope.$on("$stateChangeStart", function (event, toState, toStateParams, fromState, fromStateParams) {
            var isLoading = toState.resolve;
            if (!isLoading) {
                for (var prop in toState.views) {
                    if (toState.views.hasOwnProperty(prop)) {
                        if (toState.views[prop].resolve) {
                            isLoading = true;
                            break;
                        }
                    }
                }
            }
            if (isLoading) {
                $rootScope.loading = true;
            }
        });

        $rootScope.$on("$stateChangeSuccess", function (event, toState, toParams, fromState, fromParams) {
            $rootScope.loading = false;
        });

        $rootScope.$on("$stateChangeError", function (event, toState, toParams, fromState, fromParams, error) {
            $rootScope.loading = false;
        });
    }]);

    config.$inject = ['$stateProvider', '$locationProvider', '$httpProvider', '$urlRouterProvider', 'angularPromiseButtonsProvider'];
    function config($stateProvider, $locationProvider, $httpProvider, $urlRouterProvider, angularPromiseButtonsProvider) {
        $httpProvider.defaults.transformResponse.push(function (response) {
            if (notices[response.status_id] !== void 0) {
                notie.alert(1, notices[response.status_id], 0.3);
            }
            if (angular.isDefined(response.data) && response.status === 'success') {
                response = response.data;
                return response;
            }
            return response;
        });

        $httpProvider.interceptors.push('timestampMarker');

        $httpProvider.interceptors.push('tokenInjector');

        $httpProvider.defaults.transformRequest = function (obj) {
            var str = [];
            for (var p in obj) {
                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));
            }
            return str.join('&');
        };

        $locationProvider.html5Mode(true);
        $httpProvider.defaults.headers.post = { 'Content-Type': 'application/x-www-form-urlencoded' };
        $httpProvider.defaults.headers.put = { 'Content-Type': 'application/x-www-form-urlencoded' };
        $httpProvider.defaults.headers.delete = { 'Content-Type': 'application/x-www-form-urlencoded' };
        // redirect to '/' if not match
        $urlRouterProvider.otherwise('/');

        angularPromiseButtonsProvider.extendConfig({
            spinnerTpl: '<i class="btn-spinner"></i>',
            disableBtn: true,
            btnLoadingClass: 'is-loading',
            addClassToCurrentBtnOnly: false,
            disableCurrentBtnOnly: false
        });

        // routes
        $stateProvider.state('index', {
            url: '/',
            templateUrl: 'index/index_tpl.html',
            controller: 'IndexCtrl',
            controllerAs: 'vm',
            nav: true,
            resolve: {
                hotBooklists: ["booklistservice", function (booklistservice) {
                    return booklistservice.getHotBooklists().then(function (response) {
                        return response;
                    });
                }],
                slides: ["slideservice", function (slideservice) {
                    return slideservice.getSlides().then(function (response) {
                        return response;
                    });
                }],
                popularBooks: ["bookservice", function (bookservice) {
                    return bookservice.getPopularBooks2().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('cart', {
            url: '/cart',
            controller: 'CartCtrl',
            templateUrl: 'cart/cart_tpl.html',
            controllerAs: 'vm',
            nav: true,
            resolve: {
                cart: ["cartservice", function (cartservice) {
                    return cartservice.getCart().then(function (response) {
                        var index = 1;
                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = response[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var item = _step.value;

                                item.checked = false;
                                item.index = index++;
                                item.deleted = false;
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        return response;
                    });
                }]
            }
        }).state('me', {
            url: '/me',
            controller: 'MeCtrl',
            templateUrl: 'me/me_tpl.html',
            controllerAs: 'vm',
            nav: true,
            resolve: {
                me: ["userservice", function (userservice) {
                    return userservice.getUserInfo().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('booklists', {
            url: '/booklists',
            controller: 'BooklistsCtrl',
            templateUrl: 'booklists/booklists_tpl.html',
            controllerAs: 'vm',
            nav: true,
            resolve: {
                tags: ["tagservice", function (tagservice) {
                    return tagservice.getHotTags().then(function (response) {
                        return response;
                    });
                }],
                booklists: ["booklistservice", function (booklistservice) {
                    return new booklistservice.getBooklists('all');
                }]
            }
        }).state('recommend', {
            url: '/books/recommend',
            controller: 'RecommendMoreCtrl',
            templateUrl: 'recommend_more/recommend_more_tpl.html',
            controllerAs: 'vm',
            resolve: {
                books: ["bookservice", function (bookservice) {
                    return new bookservice.getBooks();
                }]
            }
        }).state('popular', {
            url: '/booklists/popular',
            controller: 'PopularMoreCtrl',
            templateUrl: 'popular_more/popular_more_tpl.html',
            controllerAs: 'vm',
            resolve: {
                booklists: ["booklistservice", function (booklistservice) {
                    return new booklistservice.getBooklists('all');
                }]
            }
        }).state('book', {
            url: '/book/{isbn}',
            controller: 'BookCtrl',
            templateUrl: 'book/book_tpl.html',
            controllerAs: 'vm',
            resolve: {
                book: ["bookservice", "$stateParams", function (bookservice, $stateParams) {
                    return bookservice.getBook($stateParams.isbn).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('bookDetail', {
            url: '/book/{isbn}/detail',
            controller: 'BookInfoCtrl',
            templateUrl: 'book_info/book_info_tpl.html',
            controllerAs: 'vm',
            resolve: {
                bookDetail: ["bookservice", "$stateParams", function (bookservice, $stateParams) {
                    return bookservice.getBookDetail($stateParams.isbn).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('booklist', {
            url: '/booklist/{id}',
            controller: 'BookListCtrl',
            templateUrl: 'booklist/booklist_tpl.html',
            controllerAs: 'vm',
            resolve: {
                booklist: ["$stateParams", "booklistservice", function ($stateParams, booklistservice) {
                    return booklistservice.getBooklistDetail($stateParams.id).then(function (response) {
                        var _iteratorNormalCompletion2 = true;
                        var _didIteratorError2 = false;
                        var _iteratorError2 = undefined;

                        try {
                            for (var _iterator2 = response.books[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                var book = _step2.value;

                                book.star = Math.ceil(book.rate / 2);
                            }
                        } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                                    _iterator2.return();
                                }
                            } finally {
                                if (_didIteratorError2) {
                                    throw _iteratorError2;
                                }
                            }
                        }

                        return response;
                    });
                }]
            }
        }).state('booklistComments', {
            url: '/booklist/{id}/comments',
            controller: 'BooklistCommentsCtrl',
            templateUrl: 'booklist_comments/booklist_comments_tpl.html',
            controllerAs: 'vm'
        }).state('tagBooklists', {
            url: '/booklists/{tag}',
            controller: 'TagBooklistsCtrl',
            templateUrl: 'tag-booklists/tag-booklists_tpl.html',
            controllerAs: 'vm',
            resolve: {
                booklists: ["booklistservice", "$stateParams", function (booklistservice, $stateParams) {
                    return new booklistservice.getBooklists('all', $stateParams.tag);
                }]
            }
        }).state('commentsBook', {
            url: '/comments/{isbn}',
            controller: 'CommentsCtrl',
            templateUrl: 'comments/comments_tpl.html',
            controllerAs: 'vm',
            resolve: {
                comments: ["commentservice", "$stateParams", function (commentservice, $stateParams) {
                    return commentservice.getComment($stateParams.isbn).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('tags', {
            url: '/tags',
            controller: 'TagsCtrl',
            templateUrl: 'tags/tags_tpl.html',
            controllerAs: 'vm',
            resolve: {
                tags: ["tagservice", function (tagservice) {
                    return tagservice.getAllTags().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('orders', {
            url: '/orders/{status}/show',
            controller: 'OrdersCtrl',
            templateUrl: 'orders/orders_tpl.html',
            controllerAs: 'vm',
            resolve: {
                orders: ["orderservice", "$stateParams", function (orderservice, $stateParams) {
                    return orderservice.getOrder($stateParams.status).then(function (response) {
                        var _iteratorNormalCompletion3 = true;
                        var _didIteratorError3 = false;
                        var _iteratorError3 = undefined;

                        try {
                            for (var _iterator3 = response[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                                var order = _step3.value;

                                order.status = statusDict[order.status];
                            }
                        } catch (err) {
                            _didIteratorError3 = true;
                            _iteratorError3 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                                    _iterator3.return();
                                }
                            } finally {
                                if (_didIteratorError3) {
                                    throw _iteratorError3;
                                }
                            }
                        }

                        return response;
                    });
                }]
            }
        }).state('orderDetail', {
            url: '/order/{id}/detail',
            controller: 'OrderDetailCtrl',
            templateUrl: 'order_detail/order_detail_tpl.html',
            controllerAs: 'vm',
            resolve: {
                order: ["orderservice", "$stateParams", function (orderservice, $stateParams) {
                    return orderservice.getOrderDetail($stateParams.id).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('orderReturn', {
            url: '/order/{id}/return',
            controller: 'OrderReturnCtrl',
            templateUrl: 'order_return/order_return_tpl.html',
            controllerAs: 'vm',
            resolve: {
                order: ["orderservice", "$stateParams", function (orderservice, $stateParams) {
                    return orderservice.getOrderDetail($stateParams.id).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('orderComments', {
            url: '/order/{id}/comments',
            controller: 'OrderCommentsCtrl',
            templateUrl: 'order_comments/order_comments_tpl.html',
            controllerAs: 'vm',
            resolve: {
                order: ["orderservice", "$stateParams", function (orderservice, $stateParams) {
                    return orderservice.getOrderDetail($stateParams.id).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('comments', {
            url: '/comments',
            controller: 'UserCommentsCtrl',
            templateUrl: 'user_comments/user_comments_tpl.html',
            controllerAs: 'vm',
            resolve: {
                comments: ["commentservice", "$stateParams", function (commentservice, $stateParams) {
                    return commentservice.getComment($stateParams.isbn).then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('booklistsCollect', {
            url: '/collect/booklists',
            controller: 'CollectBookListsCtrl',
            templateUrl: 'collect_booklists/collect_booklists_tpl.html',
            controllerAs: 'vm',
            resolve: {
                booklists: ["userservice", function (userservice) {
                    return userservice.getUserCollect('booklist').then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('booksCollect', {
            url: '/collect/books',
            controller: 'CollectBooksCtrl',
            templateUrl: 'collect_books/collect_books_tpl.html',
            controllerAs: 'vm',
            resolve: {
                books: ["userservice", function (userservice) {
                    return userservice.getUserCollect('book').then(function (response) {
                        var _iteratorNormalCompletion4 = true;
                        var _didIteratorError4 = false;
                        var _iteratorError4 = undefined;

                        try {
                            for (var _iterator4 = response[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                                var book = _step4.value;

                                book.star = Math.ceil(book.rate / 2);
                            }
                        } catch (err) {
                            _didIteratorError4 = true;
                            _iteratorError4 = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion4 && _iterator4.return) {
                                    _iterator4.return();
                                }
                            } finally {
                                if (_didIteratorError4) {
                                    throw _iteratorError4;
                                }
                            }
                        }

                        return response;
                    });
                }]
            }
        }).state('point', {
            url: '/point',
            controller: 'PointCtrl',
            templateUrl: 'point/point_tpl.html',
            controllerAs: 'vm',
            resolve: {
                points: ["userservice", function (userservice) {
                    return userservice.getUserPoints().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('notices', {
            url: '/notices',
            controller: 'NoticesCtrl',
            templateUrl: 'notices/notices_tpl.html',
            controllerAs: 'vm',
            resolve: {
                notices: ["userservice", function (userservice) {
                    return userservice.getUserNotices().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('settings', {
            url: '/settings',
            controller: 'SettingsCtrl',
            templateUrl: 'settings/settings_tpl.html',
            controllerAs: 'vm',
            resolve: {
                user: ["userservice", function (userservice) {
                    return userservice.getUserInfo().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('address', {
            url: '/setting/address',
            controller: 'AddressCtrl',
            templateUrl: 'setting_address/setting_address_tpl.html',
            controllerAs: 'vm',
            resolve: {
                address: ["userservice", function (userservice) {
                    return userservice.getUserAddress().then(function (response) {
                        return response;
                    });
                }]
            }
        }).state('AddressAdd', {
            url: '/setting/address/add',
            controller: 'AddressAddCtrl',
            templateUrl: 'setting_address_add/setting_address_add_tpl.html',
            controllerAs: 'vm'
        }).state('cart2order', {
            url: '/cart2order',
            controller: 'Cart2OrderCtrl',
            templateUrl: 'cart2order/cart2order_tpl.html',
            controllerAs: 'vm'
        }).state('suggest', {
            url: '/suggest',
            controller: 'SuggestCtrl',
            templateUrl: 'suggest/suggest_tpl.html',
            controllerAs: 'vm',
            resolve: {
                user: ["userservice", function (userservice) {
                    return userservice.getUserInfo().then(function (response) {
                        return response;
                    });
                }]
            }
        });
    }
})();

/*
 * 配置文件
 */
var host = 'https://www.bookist.org'; // API url
// var host = 'http://192.168.1.231';

var statusDict = { // 订单状态转换
    'create': '创建', // 订单创建，等同于待发货
    'pending': '待发货', // 订单创建后就处于待发货状态，用户可以取消订单
    'waiting': '待收货', // 订单已发货，待用户收货，不能取消订单
    'commenting': '待评价', // 用户确认收货，进入待评价状态，用户可以申请售后
    'done': '已完成', // 用户评价完毕，已完成状态，用户可以申请售后
    'canceled': '已取消', // 用户取消订单，订单终止
    'refund': '申请退款中', // 用户申请退款
    'refunding': '退款中', // 退款已受理
    'refunded': '退款完成', // 退款完成，订单终止
    'replace': '申请换货中', // 用户申请换货
    'replacing': '换货中', // 换货已受理
    'replaced': '换货完成', // 换货完成，根据用户是否评价订单，进入待评价状态或者已完成状态，用户可以再次申请售后
    'refund_refused': '退款失败', // 不满足退款条件，比如书籍人为破损，[退款中]状态时，工作人员检查不满足退款条件进入该状态
    'replace_refused': '换货失败', // 同上
    'closed': '已关闭' // 因某些原因被关闭的订单
};

/* 状态流程
 *                                                            -> refund_refused
 *                                                            -> closed    -> refund_refused
 *                                          ->  ->  -> refund -> refunding -> refunded
 * create->pending -> waiting -> commenting -> done ->
 *                  -> canceled              ->  ->  -> replace -> replacing -> replaced(commenting/done) -> ...
 *                                                             -> closed    -> replace_refused
 *                                                             -> replaced_refused
 */

/*
 * 积分机制
 * 初次登陆:            100分        所有用户第一次登陆默认获取
 * 第一次下单购买:        50分        仅限第一单，且订单完成不包含退款才计入
 * 购买一本图书：         10分        按本计，每本记一次
 * 评价一本图书：        2/5分        购买后评价5分，未购买评价2分
 * 评价获置顶:           20分         人工置顶，自动发消息通知并加分
 * 系统奖励:             xx分         提供接口，推送消息通知并发放奖励
 */

notie.setOptions({
    colorSuccess: '#57BF57',
    colorWarning: '#D6A14D',
    colorError: '#E1715B',
    colorInfo: '#4D82D6',
    colorNeutral: '#A0A0A0',
    colorText: '#FFFFFF',
    animationDelay: 300, // Be sure to also change 'transition: all 0.3s ease' variable in .scss file
    backgroundClickDismiss: true
});
var notices = {
    '216': '加入购物车成功'
};
(function () {
    'use strict';

    var bookRow = function bookRow() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                books: '=',
                scroll: '='
            },
            template: '\n    <div class="books-content" infinite-scroll=\'scroll.nextPage()\'\n         infinite-scroll-disabled=\'scroll.busy\'\n         infinite-scroll-distance=\'1\'>\n        <a class="books-content-list" ng-repeat="book in books" ui-sref="book({isbn: book.isbn})">\n            <img ng-src="{{book.image}}">\n            <span class="title">{{book.title}}</span>\n            <uib-rating class="star red-star wechat-fix"\n                        ng-model="book.star"\n                        max="5" read-only="true"\n                        state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'"></uib-rating>\n            <span class="rate">&nbsp;{{book.rate}}</span>\n            <blockquote class="reason" ng-bind-html="book.reason"></blockquote>\n        </a>\n        <div class="loading-more" ng-if="scroll.busy"><i class="fa fa-spinner fa-pulse fa-2x"></i></div>\n    </div>\n            '
        };
    };

    angular.module('index').directive('bookRow', bookRow);
})();

(function () {
    'use strict';

    var bookSlide = function bookSlide() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                books: '=books'
            },
            template: '\n             <div class="slides-book-content">\n                 <a ng-repeat="book in books track by $index" ui-sref="book({isbn: book.isbn})">\n                    <img ng-src="{{book.image}}">\n                    <p>{{book.title}}</p>\n                    <uib-rating ng-model="book.star"\n                                class="red-star wechat-fix"\n                                state-on="\'fa fa-star\'"\n                                state-off="\'fa fa-star-o\'"\n                                max="5" \n                                read-only="true"></uib-rating>\n                    <span>{{book.rate | number:1}}</span>\n                </a>\n            </div>\n                '
        };
    };

    angular.module('index').directive('bookSlide', bookSlide);
})();

(function () {
    'use strict';

    var booklistRow = function booklistRow() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                booklists: '=',
                scroll: '='
            },
            template: '       \n           <div class="booklists-row"  infinite-scroll=\'scroll.nextPage()\' \n                infinite-scroll-disabled=\'scroll.busy\'  infinite-scroll-distance=\'1\'>\n                <a class="booklist" ng-repeat="booklist in booklists" ui-sref="booklist({id: booklist.id})">\n                    <div class="pic">\n                        <img ng-src="{{booklist.image}}">\n                    </div>\n                    <span class="title">{{booklist.title}}</span>\n                    <span class="collect">{{booklist.collect}}人收藏</span>\n                    <div class="tags">\n                        <div class="tag" ng-repeat="tag in booklist.tags">\n                            {{tag}}\n                        </div>\n                    </div>\n                </a>\n            </div>\n            '
        };
    };

    angular.module('index').directive('booklistRow', booklistRow);
})();
(function () {
    'use strict';

    var commentRow = function commentRow() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                comment: '=',
                up: '=',
                down: '='
            },
            template: '\n                    <div class="comment">\n                    <div class="origin">\n                        <img ng-src="{{comment.user.avatar}}">\n                        <span>{{comment.user.username}}</span>\n                        <uib-rating class="star red-star"\n                            ng-model="comment.star"\n                            state-on="\'fa fa-star\'"\n                            state-off="\'fa fa-star-o\'"\n                            max="5" read-only="true"></uib-rating>\n                    </div>\n                    <p ng-bind-html="comment.content"></p>\n                    <div class="comment-meta">\n                            <p>{{comment.create_time*1000 | date:\'yyyy-MM-dd HH:mm\'}}</p>\n                        <i class="fa"\n                            ng-class={false:\'fa-thumbs-o-down\',true:\'fa-thumbs-down\'}[comment.down_already]\n                            ng-click="down(comment)">\n                            {{comment.down}}\n                        </i>\n                        <i class="fa"\n                            ng-class={false:\'fa-thumbs-o-up\',true:\'fa-thumbs-up\'}[comment.up_already]\n                            ng-click="up(comment)">\n                            {{comment.up}}\n                        </i>\n                    </div>\n                    </div>\n                '
        };
    };

    angular.module('index').directive('commentRow', commentRow);
})();
(function () {
    'use strict';

    var commentStar = function commentStar() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                stars: '=',
                title: '@'
            },
            template: '\n                    <div>\n                    <span>{{title}}</span>\n                    <uib-rating ng-model="stars" max="5"\n                                read-only="false"\n                                class="red-star star" required\n                                on-leave="overStar = null"\n                                state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'">                         \n                    </uib-rating>\n                    </div>\n                '
        };
    };

    angular.module('index').directive('commentStar', commentStar);
})();
(function () {
    'use strict';

    var deleteBox = function deleteBox() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                content: '=',
                commit: '&',
                cancel: '='
            },
            template: '\n            <div>\n            <div class="modal-dialog">\n                <div class="modal-header">\n                    <h4 class="modal-title">你确认要删除吗?</h4>\n                </div>\n                <div class="modal-body">\n                    <p>{{content}}</p>\n                </div>\n                <div class="modal-footer">\n                    <button class="btn btn-primary" promise-btn\n                            ng-click="commit()">确认</button>\n                    <button class="btn btn-warning"\n                            ng-click="cancel = false">取消</button>\n                </div>\n            </div>\n            <div class="modal-backdrop fade" style="z-index: 1040;"></div>\n            </div>\n            '
        };
    };

    angular.module('index').directive('deleteBox', deleteBox);
})();

(function () {
    'use strict';

    angular.module('index').directive('focusMe', focusMe);

    focusMe.$inject = ['$timeout'];
    function focusMe($timeout) {
        return {
            scope: { trigger: '@focusMe' },
            link: function link(scope, element) {
                scope.$watch('trigger', function (value) {
                    if (value === 'true') {
                        $timeout(function () {
                            element[0].focus();
                        });
                    }
                });
            }
        };
    }
})();
(function () {
    'use strict';

    var myMaxlength = function myMaxlength() {
        return {
            require: 'ngModel',
            link: function link(scope, element, attrs, ngModelCtrl) {
                var maxlength = Number(attrs.myMaxlength);
                function fromUser(text) {
                    if (text.length > maxlength) {
                        var transformedInput = text.substring(0, maxlength);
                        ngModelCtrl.$setViewValue(transformedInput);
                        ngModelCtrl.$render();
                        return transformedInput;
                    }
                    return text;
                }
                ngModelCtrl.$parsers.push(fromUser);
            }
        };
    };

    angular.module('index').directive('myMaxlength', myMaxlength);
})();
(function () {
    'use strict';

    var navbar = function navbar() {
        return {
            restrict: 'AE', //推荐使用A
            replace: true, //template会覆盖掉自定义标签
            templateUrl: 'navbar/navbar_tpl.html'
        };
    };

    angular.module('index').directive('navbar', navbar);
})();
(function () {
    'use strict';

    var topBar = function topBar() {
        return {
            restrict: 'EA',
            replace: true,
            scope: {
                title: '=',
                icon: '='
            },
            template: '\n            <div class="navbar navbar-default navbar-fixed-top topbar">\n                <a class="navbar-brand"><i class="fa fa-book"></i>\n                    {{title}}</a>\n            </div>\n            '
        };
    };

    angular.module('index').directive('topBar', topBar);
})();

(function () {
    'use strict';

    angular.module('index').factory('booklistservice', booklistservice);

    booklistservice.$inject = ['$http'];

    function booklistservice($http) {
        var booklist = [];

        return {
            collectBooklist: collectBooklist,
            getHotBooklists: getHotBooklists,
            getBooklistDetail: getBooklistDetail,
            getBooklists: getBooklists,
            loveBooklist: loveBooklist
        };

        function collectBooklist(id) {
            return $http.post(host + '/collect', {
                type: 'booklist',
                id: id
            }).then(function (response) {
                return response.data;
            });
        }

        function loveBooklist(id) {
            return $http.post(host + '/booklist_love', {
                id: id
            }).then(function (response) {
                return response.data;
            });
        }

        function getBooklistDetail(id) {
            if (booklist[id] === void 0) {
                return booklist[id] = $http.get(host + '/booklist?id=' + id).then(function (response) {
                    return response.data;
                });
            }
            return booklist[id];
        }

        function getHotBooklists() {
            return $http.get(host + '/booklist?type=hot').then(function (response) {
                return response.data;
            });
        }

        function getBooklists(type, tag) {
            this.list = [];
            this.busy = false;
            this.url = host + '/booklist';
            this.params = {
                type: type,
                page: 1
            };
            if (tag !== void 0) {
                this.params.tag = tag;
            }
            this.continue = true;
            this.nextPage = function () {
                if (!this.continue) {
                    this.busy = false;
                    return;
                }
                if (this.busy) {
                    return;
                }
                this.busy = true;
                $http({
                    method: 'GET',
                    url: this.url,
                    params: this.params
                }).success(function (response) {
                    var list = response;
                    if (list.length < 5) {
                        this.continue = false;
                    }
                    for (var i = 0; i < list.length; i++) {
                        list[i].star = Math.ceil(list[i].rate / 2);
                        this.list.push(list[i]);
                    }
                    this.busy = false;
                    this.params.page += 1;
                }.bind(this));
            }.bind(this);
            this.nextPage();
            return this;
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').factory('bookservice', bookservice);

    bookservice.$inject = ['$http', 'commonservice', '$q'];

    function bookservice($http, commonservice, $q) {

        var bookDetail = [];
        var bookBelongs = [];
        var popBooks = null;
        var similarBook = [];
        var changeStars = commonservice.changeStars;

        return {
            getPopularBooks2: getPopularBooks2,
            getBook: getBook,
            getBookDetail: getBookDetail,
            collectBook: collectBook,
            discollectBook: discollectBook,
            getSimilarBook: getSimilarBook,
            getBookBelongs: getBookBelongs,
            getBooks: getBooks
        };

        function getPopularBooks2() {
            if (popBooks === null) {
                return popBooks = $http.get(host + '/pop_book').then(function (response) {
                    return changeStars(response.data);
                });
            }
            return popBooks;
        }

        function getBooks() {
            this.list = [];
            this.busy = false;
            this.url = host + '/pop_book';
            this.params = {
                page: 1
            };
            this.continue = true;
            this.nextPage = function () {
                if (!this.continue) {
                    this.busy = false;
                    return;
                }
                if (this.busy) {
                    return;
                }
                this.busy = true;
                $http({
                    method: 'GET',
                    url: this.url,
                    params: this.params
                }).success(function (response) {
                    var list = response;
                    if (list.length < 5) {
                        this.continue = false;
                    }
                    for (var i = 0; i < list.length; i++) {
                        list[i].star = Math.ceil(list[i].rate / 2);
                        this.list.push(list[i]);
                    }
                    this.busy = false;
                    this.params.page += 1;
                }.bind(this));
            }.bind(this);
            this.nextPage();
            return this;
        }

        function getBookDetail(isbn) {
            if (bookDetail[isbn] === void 0) {
                return bookDetail[isbn] = $http.get(host + '/book?type=detail&isbn=' + isbn).then(function (response) {
                    return response.data;
                });
            }
            return bookDetail[isbn];
        }

        function getBookBelongs(isbn) {
            if (bookBelongs[isbn] === void 0) {
                return bookBelongs[isbn] = $http.get(host + '/booklist?isbn=' + isbn).then(function (response) {
                    return response.data;
                });
            }
            return bookBelongs[isbn];
        }

        function getSimilarBook(isbn) {
            if (similarBook[isbn] === void 0) {
                return similarBook[isbn] = $http.get(host + '/similar_book?isbn=' + isbn).then(function (response) {
                    return changeStars(response.data);
                });
            }
            return similarBook[isbn];
        }

        function collectBook(isbn) {
            return $http.post(host + '/collect', {
                isbn: isbn,
                type: 'book'
            }).then(function (response) {
                return response.data;
            });
        }

        function discollectBook(isbn) {
            return $http.post(host + '/collect', {
                type: 'book',
                isbn: isbn
            }).then(function (response) {
                return response.data;
            });
        }

        function getBook(isbn) {
            return $http.get(host + '/book?isbn=' + isbn).then(function (response) {
                return changeStars(response.data);
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').factory('cartservice', cartservice);

    cartservice.$inject = ['$http'];

    function cartservice($http) {

        return {
            getCart: getCart,
            addCart: addCart,
            updateCart: updateCart,
            deleteCart: deleteCart
        };

        function addCart(isbn) {
            return $http.post(host + '/cart', {
                isbn: isbn
            }).then(function (response) {
                return response.data;
            });
        }

        function getCart() {
            return $http.get(host + '/user_carts').then(function (response) {
                return response.data;
            });
        }

        function updateCart(isbn, number) {
            return $http.put(host + '/cart', {
                isbn: isbn,
                number: number
            }).then(function (response) {
                return response.data;
            });
        }

        function deleteCart(isbn) {
            return $http.delete(host + '/cart', { data: {
                    isbn: isbn
                } }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').factory('commentservice', commentservice);

    commentservice.$inject = ['$http', 'commonservice'];

    function commentservice($http, commonservice) {

        // 暂存进入全部评论页面的标题
        var title = null;

        var changeStars = commonservice.changeStars;

        return {
            up: up,
            down: down,
            postComment: postComment,
            editComment: editComment,
            deleteComment: deleteComment,
            getComment: getComment,
            platformComment: platformComment,
            getTitle: getTitle,
            setTitle: setTitle
        };

        function getTitle() {
            return title;
        }

        function setTitle(value) {
            title = value;
        }

        function platformComment(stars1, stars2, stars3) {
            return $http.post(host + '/user_billing', {
                stars1: stars1 * 2,
                stars2: stars2 * 2,
                stars3: stars3 * 2
            }).then(function (response) {
                return response.data;
            });
        }

        function getComment(isbn) {
            return $http.get(host + '/comments?isbn=' + isbn).then(function (response) {
                return changeStars(response.data);
            });
        }

        function deleteComment(id) {
            return $http.delete(host + '/comment', { data: {
                    id: id
                } }).then(function (response) {
                return response.data;
            });
        }

        function editComment(id, star, content) {
            return $http.put(host + '/comment', {
                id: id,
                star: star,
                content: content,
                type: 'edit'
            }).then(function (response) {
                return response.data;
            });
        }

        function postComment(isbn, star, content) {
            return $http.post(host + '/comment', {
                content: content,
                star: star * 2,
                isbn: isbn
            }).then(function (response) {
                return response.data;
            });
        }

        function up(id) {
            return $http.put(host + '/comment', {
                id: id,
                type: 'up'
            }).then(function (response) {
                return response.data;
            });
        }

        function down(id) {
            return $http.put(host + '/comment', {
                id: id,
                type: 'down'
            }).then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').factory('commonservice', commonservice);

    function commonservice() {

        return {
            changeStars: changeStars
        };

        function changeStars(books) {
            if (books instanceof Array) {
                var _iteratorNormalCompletion5 = true;
                var _didIteratorError5 = false;
                var _iteratorError5 = undefined;

                try {
                    for (var _iterator5 = books[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                        var book = _step5.value;

                        if (book.rate) book.star = Math.ceil(book.rate / 2);else if (book.star) book.star = Math.ceil(book.star / 2);
                    }
                } catch (err) {
                    _didIteratorError5 = true;
                    _iteratorError5 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion5 && _iterator5.return) {
                            _iterator5.return();
                        }
                    } finally {
                        if (_didIteratorError5) {
                            throw _iteratorError5;
                        }
                    }
                }

                return books;
            }
            if (books.rate !== void 0) {
                if (books.rate) books.star = Math.ceil(books.rate / 2);else if (books.star) books.star = Math.ceil(books.star / 2);
            }
            return books;
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').factory('orderservice', orderservice);

    orderservice.$inject = ['$http'];

    function orderservice($http) {

        // 暂存进入订单生成页面时的勾选书籍
        var store = null;

        return {
            setStore: setStore,
            getStore: getStore,
            makeOrder: makeOrder,
            getOrderDetail: getOrderDetail,
            cancelOrder: cancelOrder,
            receiptOrder: receiptOrder,
            getOrder: getOrder
        };

        function getOrder(status) {
            return $http.get(host + '/user_billings?status=' + status).then(function (response) {
                return response.data;
            });
        }

        function receiptOrder(id) {
            return $http.put(host + '/billing', {
                id: id,
                status: 'commenting'
            }).then(function (response) {
                return response.data;
            });
        }

        function cancelOrder(id) {
            return $http.delete(host + '/billing', { data: {
                    id: id
                } }).then(function (response) {
                return response.data;
            });
        }

        function getOrderDetail(id) {
            return $http.get(host + '/billing?id=' + id).then(function (response) {
                return response.data;
            });
        }

        function makeOrder(cart_list, address_id) {
            return $http.post(host + '/billing', {
                cart_list: cart_list,
                address_id: address_id
            }).then(function (response) {
                return response.data;
            });
        }

        function setStore(books) {
            store = books;
        }

        function getStore() {
            return store;
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').factory('slideservice', slideservice);

    slideservice.$inject = ['$http', '$q'];

    function slideservice($http, $q) {
        var slides = null;

        return {
            getSlides: getSlides
        };

        /**
         * 获取活动轮播
         * @returns {*}
         */
        function getSlides() {
            if (slides === null) {
                return slides = $http.get(host + '/slides').then(function (response) {
                    return response.data;
                });
            }
            return slides;
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').factory('tagservice', tagservice);

    tagservice.$inject = ['$http', '$q'];

    function tagservice($http, $q) {

        var hotTags = null;
        var allTags = null;

        return {
            getHotTags: getHotTags,
            getAllTags: getAllTags
        };

        function getAllTags() {
            if (allTags == null) {
                return allTags = $http.get(host + '/tags?type=all').then(function (response) {
                    return response.data;
                });
            }
            return allTags;
        }

        function getHotTags() {
            if (hotTags == null) {
                return hotTags = $http.get(host + '/tags?type=hot').then(function (response) {
                    return response.data;
                });
            }
            return hotTags;
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').factory('timestampMarker', timestampMarker);

    function timestampMarker() {
        return {
            request: function request(config) {
                config.requestTimestamp = new Date().getTime();
                return config;
            },
            response: function response(_response) {
                _response.config.responseTimestamp = new Date().getTime();
                return _response;
            }
        };
    }
})();

(function () {
    'use strict';

    angular.module('index').factory('tokenInjector', tokenInjector);

    tokenInjector.$inject = ['$injector', '$q', '$log'];

    function tokenInjector($injector, $q, $log) {
        return {
            request: function request(config) {

                var url = host + '/auth_verify';
                var deferred = $q.defer();
                var http = $injector.get('$http');
                if (config.url === url) return config;

                if (sessionStorage.verify === 'true') {
                    var timestamp = new Date().getTime() / 1000;
                    // 时间超过7100s，需要重新验证
                    if (timestamp - localStorage.getItem('createdtime') >= 7100) {
                        sessionStorage.verify = false;
                    }
                    config.headers['token'] = localStorage.getItem('token');
                    config.headers['userid'] = localStorage.getItem('user_id');
                    deferred.resolve(config);
                } else {
                    // 验证token
                    http({
                        method: 'GET',
                        url: url,
                        params: {
                            token: localStorage.getItem('token'),
                            user_id: localStorage.getItem('user_id')
                        }
                    }).success(function (response) {
                        localStorage.setItem('token', response.token);
                        localStorage.setItem('createdtime', response.time);
                        sessionStorage.verify = 'true';
                        config.headers['token'] = localStorage.getItem('token');
                        config.headers['userid'] = localStorage.getItem('user_id');
                        $log.log('verify OK');
                        deferred.resolve(config);
                    }).error(function () {
                        // 跳转微信登陆
                        $log.log('verify FAIL');
                        // window.location.replace(host);
                        deferred.resolve(config);
                    });
                }
                return deferred.promise;
            }
        };
    }
})();

(function () {
    'use strict';

    angular.module('index').factory('userservice', userservice);

    userservice.$inject = ['$http', 'commonservice', '$q'];

    function userservice($http, commonservice, $q) {

        var changeStars = commonservice.changeStars;

        var defaultAddress = null;
        var address = null;
        var userInfo = null;

        return {
            getUserInfo: getUserInfo,
            getUserNotices: getUserNotices,
            getUserPoints: getUserPoints,
            getUserComments: getUserComments,
            getUserCollect: getUserCollect,
            postSuggestion: postSuggestion,

            getUserAddress: getUserAddress,
            updateUserAddress: updateUserAddress,
            deleteUserAddress: deleteUserAddress,
            addUserAddress: addUserAddress,
            setUserDefaultAddress: setUserDefaultAddress,
            getUserDefaultAddress: getUserDefaultAddress,

            setAddress: setAddress,
            getAddress: getAddress
        };

        function getUserDefaultAddress() {
            if (defaultAddress === null) {
                return defaultAddress = $http.get(host + '/user_address?type=default').then(function (response) {
                    return response.data;
                });
            }
            return defaultAddress;
        }

        function getUserCollect(type) {
            return $http.get(host + '/user_collects?type=' + type).then(function (response) {
                return changeStars(response.data);
            });
        }

        function setUserDefaultAddress(name, phone, dormitory, id) {
            var address = {
                name: name,
                phone: phone,
                dormitory: dormitory,
                type: 'default',
                id: id
            };
            return $http.put(host + '/user_address', address).then(function (response) {
                if (response.status == 200) {
                    defaultAddress = address;
                }
            });
        }

        function deleteUserAddress(id) {
            return $http.delete(host + '/user_address', { data: {
                    id: id
                } }).then(function (response) {
                if (response.status == 200) {
                    defaultAddress = null;
                }
            });
        }

        function updateUserAddress(name, phone, dormitory, id) {
            return $http.put(host + '/user_address', {
                name: name,
                phone: phone,
                dormitory: dormitory,
                id: id
            }).then(function (response) {
                return response.data;
            });
        }

        function addUserAddress(name, phone, dormitory) {
            return $http.post(host + '/user_address', {
                name: name,
                phone: phone,
                dormitory: dormitory
            }).then(function (response) {
                return response.data;
            });
        }

        function setAddress(value) {
            address = value;
        }

        function getAddress() {
            return address;
        }

        function getUserAddress() {
            return $http.get(host + '/user_address').then(function (response) {
                return response.data;
            });
        }

        function getUserComments() {
            return $http.get(host + '/user_comments').then(function (response) {
                return response.data;
            });
        }

        function postSuggestion(content) {
            return $http.post(host + '/user_feedback', {
                content: content
            }).then(function (response) {
                return response.data;
            });
        }

        function getUserPoints() {
            return $http.get(host + '/user_points').then(function (response) {
                return response.data;
            });
        }

        function getUserInfo() {
            if (userInfo == null) {
                return userInfo = $http.get(host + '/user_info').then(function (response) {
                    return response.data;
                });
            }
            return userInfo;
        }

        function getUserNotices() {
            return $http.get(host + '/user_notices').then(function (response) {
                return response.data;
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').controller('BookCtrl', BookCtrl);

    BookCtrl.$inject = ['$stateParams', 'commentservice', 'bookservice', 'cartservice', 'userservice', 'book'];

    function BookCtrl($stateParams, commentservice, bookservice, cartservice, userservice, book) {

        var vm = this;
        vm.more = false; // 默认不加载更多书籍信息介绍
        vm.required = true; // 必填
        vm.star = 5; // 默认星星数

        vm.addCart = addCart;
        vm.collect = collect;
        vm.postComment = postComment;
        vm.up = up;
        vm.down = down;

        vm.book = book;
        commentservice.setTitle(vm.book.title);

        userservice.getUserInfo().then(function (response) {
            vm.user = response;
        });

        bookservice.getSimilarBook($stateParams.isbn).then(function (response) {
            vm.similarbooks = response;
        });

        bookservice.getBookBelongs($stateParams.isbn).then(function (response) {
            vm.booklists = response;
        });

        bookservice.getPopularBooks2().then(function (response) {
            vm.test = response;
        });

        function addCart() {
            return cartservice.addCart($stateParams.isbn);
        }

        function collect() {
            return bookservice.collectBook($stateParams.isbn).then(function () {
                vm.book.collect_already = !vm.book.collect_already;
            });
        }

        function up(comment) {
            commentservice.up(comment.id).then(function () {
                comment.down = comment.down_already ? --comment.down : comment.down;
                comment.up_already = !comment.up_already;
                comment.down_already = false;
                comment.up = comment.up_already ? ++comment.up : --comment.up;
            });
        }

        function down(comment) {
            commentservice.down(comment.id).then(function () {
                comment.up = comment.up_already ? --comment.up : comment.up;
                comment.down_already = !comment.down_already;
                comment.up_already = false;
                comment.down = comment.down_already ? ++comment.down : --comment.down;
            });
        }

        function postComment() {
            if (vm.content === void 0) return;
            return commentservice.postComment($stateParams.isbn, vm.star, vm.content).then(function (response) {
                vm.commentBox = false;
                response.user = {
                    avatar: vm.user.avatar,
                    username: vm.user.username
                };
                response.star = response.star / 2;
                vm.book.commenters++;
                vm.book.comments.push(response);
                vm.content = '';
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('BookInfoCtrl', BookInfoCtrl);

    BookInfoCtrl.$inject = ['bookDetail'];

    function BookInfoCtrl(bookDetail) {
        var vm = this;
        vm.book = bookDetail;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('BookListCtrl', BookListCtrl);

    BookListCtrl.$inject = ['$stateParams', 'booklistservice', 'booklist'];

    function BookListCtrl($stateParams, booklistservice, booklist) {
        var vm = this;
        vm.booklist = booklist;

        vm.collect = collect;
        vm.love = love;

        function love() {
            return booklistservice.loveBooklist($stateParams.id).then(function () {
                vm.booklist.love_already = !vm.booklist.love_already;
                vm.booklist.love = vm.booklist.love_already ? ++vm.booklist.love : --vm.booklist.love;
            });
        }

        function collect() {
            return booklistservice.collectBooklist($stateParams.id).then(function () {
                vm.booklist.collect_already = !vm.booklist.collect_already;
                vm.booklist.collect = vm.booklist.collect_already ? ++vm.booklist.collect : --vm.booklist.collect;
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('BooklistCommentsCtrl', BooklistCommentsCtrl);

    BooklistCommentsCtrl.$inject = ['$stateParams', 'commentservice', 'userservice'];

    function BooklistCommentsCtrl($stateParams, commentservice, userservice) {
        var vm = this;
        vm.title = commentservice.getTitle();
        vm.commentBox = false;

        vm.postComment = postComment;
        vm.up = up;
        vm.down = down;

        getComment();
        getUserInfo();

        function getComment() {
            commentservice.getComment($stateParams.isbn).then(function (response) {
                vm.comments = [{
                    "content": '这种重中之重',
                    "create_time": 1468993867,
                    "down": 0,
                    "down_already": false,
                    "id": "5794ebbf6086e5000e620909",
                    "star": 10,
                    "up": 1,
                    "up_already": true,
                    "user": {
                        "avatar": "http://wx.qlogo.cn/mmopen/Xe4iaZDHJ3NROqLicjmleiaZX1g3LlNDBXpRQic9rcSLnKAs40FspEsoNb0BcicjlqSh8yO2TqYOzp19XHCF5acVRcmyDbodQIPE7/0",
                        "username": '瑞铭'
                    }
                }, {
                    "content": "wwwwwwwwwww",
                    "create_time": 1468993867,
                    "down": 0,
                    "down_already": false,
                    "id": "5796e2b06086e5000e62096d",
                    "star": 10,
                    "up": 1,
                    "up_already": true,
                    "user": {
                        "avatar": "http://wx.qlogo.cn/mmopen/Xe4iaZDHJ3NROqLicjmleiaZX1g3LlNDBXpRQic9rcSLnKAs40FspEsoNb0BcicjlqSh8yO2TqYOzp19XHCF5acVRcmyDbodQIPE7/0",
                        "username": '瑞铭'
                    }
                }, {
                    "content": "1",
                    "create_time": 1468993867,
                    "down": 0,
                    "down_already": false,
                    "id": "579701c96086e5000e620987",
                    "star": 6,
                    "up": 1,
                    "up_already": true,
                    "user": {
                        "avatar": "http://wx.qlogo.cn/mmopen/Xe4iaZDHJ3NROqLicjmleiaZX1g3LlNDBXpRQic9rcSLnKAs40FspEsoNb0BcicjlqSh8yO2TqYOzp19XHCF5acVRcmyDbodQIPE7/0",
                        "username": '瑞铭'
                    }
                }];
            });
        }

        function getUserInfo() {
            userservice.getUserInfo().then(function (response) {
                vm.user = response;
            });
        }

        function up(comment) {
            commentservice.up(comment.id).then(function () {
                comment.down = comment.down_already ? --comment.down : comment.down;
                comment.up_already = !comment.up_already;
                comment.down_already = false;
                comment.up = comment.up_already ? ++comment.up : --comment.up;
            });
        }

        function down(comment) {
            commentservice.down(comment.id).then(function () {
                comment.up = comment.up_already ? --comment.up : comment.up;
                comment.down_already = !comment.down_already;
                comment.up_already = false;
                comment.down = comment.down_already ? ++comment.down : --comment.down;
            });
        }

        function postComment() {}
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('BooklistsCtrl', BooklistsCtrl);

    BooklistsCtrl.$inject = ['booklistservice', 'tags', 'booklists'];

    function BooklistsCtrl(booklistservice, tags, booklists) {
        var vm = this;
        vm.tags = tags;
        vm.booklists = booklists;

        vm.timeOrder = getBooklistOrderByTime;
        vm.collectOrder = getBooklistOrderByCollect;

        function getBooklistOrderByTime() {
            vm.booklists = new booklistservice.getBooklists('time');
            vm.booklists.nextPage();
        }

        function getBooklistOrderByCollect() {
            vm.booklists = new booklistservice.getBooklists('collect');
            vm.booklists.nextPage();
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('CartCtrl', CartCtrl);

    CartCtrl.$inject = ['cart', '$state', 'cartservice', 'bookservice', 'orderservice'];

    function CartCtrl(cart, $state, cartservice, bookservice, orderservice) {
        var vm = this;
        vm.checked = false; // 默认全不选
        vm.editStatu = false; // 默认非编辑状态
        vm.price = 0; // 初始价格
        vm.count = 0; // 书籍数量(单本数量可叠加，结算显示)
        vm.number = 0; // 书籍种类(单本数量不叠加，移入收藏和删除显示)
        vm.checkArr = []; // 暂存勾选状态
        vm.items = cart;

        vm.recount = recount;
        vm.selectAll = selectAll;
        vm.editOk = editOk;
        vm.plus = plus;
        vm.minus = minus;
        vm.edit = edit;
        vm.collect = collect;
        vm.removeBook = removeBook;
        vm.removeBooks = removeBooks;
        vm.cart2order = cart2order;
        vm.editBook = editBook;

        recount(vm.items);

        function recount() {
            vm.price = 0;
            vm.count = 0;
            vm.number = 0;
            var _iteratorNormalCompletion6 = true;
            var _didIteratorError6 = false;
            var _iteratorError6 = undefined;

            try {
                for (var _iterator6 = vm.items[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                    var item = _step6.value;

                    if (!item.deleted) {
                        vm.price += +item.checked * item.price * item.number;
                        vm.count += +item.checked * item.number;
                        item.checked ? ++vm.number : vm.number;
                    }
                }
            } catch (err) {
                _didIteratorError6 = true;
                _iteratorError6 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion6 && _iterator6.return) {
                        _iterator6.return();
                    }
                } finally {
                    if (_didIteratorError6) {
                        throw _iteratorError6;
                    }
                }
            }
        }

        function selectAll() {
            var _iteratorNormalCompletion7 = true;
            var _didIteratorError7 = false;
            var _iteratorError7 = undefined;

            try {
                for (var _iterator7 = vm.items[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
                    var item = _step7.value;

                    item.checked = vm.checked;
                }
            } catch (err) {
                _didIteratorError7 = true;
                _iteratorError7 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion7 && _iterator7.return) {
                        _iterator7.return();
                    }
                } finally {
                    if (_didIteratorError7) {
                        throw _iteratorError7;
                    }
                }
            }

            vm.recount();
        }

        function plus(item) {
            item.number < 10 ? ++item.number : item.number;
            cartservice.updateCart(item.book.isbn, item.number).then(function () {
                vm.recount();
            });
        }

        function minus(item) {
            item.number > 1 ? --item.number : item.number;
            cartservice.updateCart(item.book.isbn, item.number).then(function () {
                vm.recount();
            });
        }

        function edit() {
            var _iteratorNormalCompletion8 = true;
            var _didIteratorError8 = false;
            var _iteratorError8 = undefined;

            try {
                for (var _iterator8 = vm.items[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
                    var item = _step8.value;

                    vm.checkArr[item.book.isbn] = item.checked;
                    item.checked = false;
                }
            } catch (err) {
                _didIteratorError8 = true;
                _iteratorError8 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion8 && _iterator8.return) {
                        _iterator8.return();
                    }
                } finally {
                    if (_didIteratorError8) {
                        throw _iteratorError8;
                    }
                }
            }

            vm.recount();
            vm.editStatu = true;
        }

        function editOk() {
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
                for (var _iterator9 = vm.items[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                    var item = _step9.value;

                    item.checked = vm.checkArr[item.book.isbn] || false;
                }
            } catch (err) {
                _didIteratorError9 = true;
                _iteratorError9 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion9 && _iterator9.return) {
                        _iterator9.return();
                    }
                } finally {
                    if (_didIteratorError9) {
                        throw _iteratorError9;
                    }
                }
            }

            vm.recount();
            vm.editStatu = false;
        }

        function removeBook(item) {
            item.checked = false;
            item.deleted = true;
            cartservice.deleteCart(item.book.isbn);
            vm.recount();
        }

        function removeBooks() {
            vm.isbn_list = '';
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
                for (var _iterator10 = vm.items[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                    var item = _step10.value;

                    if (item.checked && !item.deleted) {
                        vm.isbn_list += vm.isbn_list ? ',' + item.book.isbn : item.book.isbn;
                        item.deleted = true;
                    }
                }
            } catch (err) {
                _didIteratorError10 = true;
                _iteratorError10 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion10 && _iterator10.return) {
                        _iterator10.return();
                    }
                } finally {
                    if (_didIteratorError10) {
                        throw _iteratorError10;
                    }
                }
            }

            return cartservice.deleteCart(vm.isbn_list).then(function () {
                vm.recount();
            });
        }

        function collect() {
            vm.isbn_list = '';
            vm.isbn_list_collect = '';
            var _iteratorNormalCompletion11 = true;
            var _didIteratorError11 = false;
            var _iteratorError11 = undefined;

            try {
                for (var _iterator11 = vm.items[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
                    var item = _step11.value;

                    if (item.checked && !item.deleted) {
                        vm.isbn_list += vm.isbn_list ? ',' + item.book.isbn : item.book.isbn;
                        if (item.book.is_collection) {
                            vm.isbn_list_collect += vm.isbn_list_collect ? ',' + item.book.isbn : item.book.isbn;
                        }
                        item.deleted = true;
                        item.checked = false;
                    }
                }
            } catch (err) {
                _didIteratorError11 = true;
                _iteratorError11 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion11 && _iterator11.return) {
                        _iterator11.return();
                    }
                } finally {
                    if (_didIteratorError11) {
                        throw _iteratorError11;
                    }
                }
            }

            cartservice.deleteCart(vm.isbn_list);
            vm.recount();
            return bookservice.collectBook(vm.isbn_list);
        }

        function editBook(item) {
            if (item.number > 10) item.number = 10;
            if (item.number <= 0) item.number = 1;
            cartservice.updateCart(item.book.isbn, item.number).then(function () {
                vm.recount();
            });
        }

        function cart2order() {
            var books = [];
            var _iteratorNormalCompletion12 = true;
            var _didIteratorError12 = false;
            var _iteratorError12 = undefined;

            try {
                for (var _iterator12 = vm.items[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
                    var item = _step12.value;

                    if (item.checked && !item.deleted) books.push(item);
                }
            } catch (err) {
                _didIteratorError12 = true;
                _iteratorError12 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion12 && _iterator12.return) {
                        _iterator12.return();
                    }
                } finally {
                    if (_didIteratorError12) {
                        throw _iteratorError12;
                    }
                }
            }

            orderservice.setStore(books);
            $state.go('cart2order');
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('Cart2OrderCtrl', Cart2OrderCtrl);

    Cart2OrderCtrl.$inject = ['$location', 'userservice', 'orderservice'];

    function Cart2OrderCtrl($location, userservice, orderservice) {
        var vm = this;
        vm.no_address = true; // 地址必须有
        vm.cart_list = '';
        vm.order = { number: 0, price: 0 };
        vm.make = make;

        /**
         * 从orderservice获取订单数据
         */
        vm.books = orderservice.getStore();
        var _iteratorNormalCompletion13 = true;
        var _didIteratorError13 = false;
        var _iteratorError13 = undefined;

        try {
            for (var _iterator13 = vm.books[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
                var book = _step13.value;

                vm.order.number += book.number;
                vm.order.price += book.price * book.number;
                vm.cart_list += vm.cart_list ? ',' + book.id : book.id;
            }
        } catch (err) {
            _didIteratorError13 = true;
            _iteratorError13 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion13 && _iterator13.return) {
                    _iterator13.return();
                }
            } finally {
                if (_didIteratorError13) {
                    throw _iteratorError13;
                }
            }
        }

        getUserDefaultAddress();

        // TODO 等待地址问题修复
        function getUserDefaultAddress() {
            userservice.getUserDefaultAddress().then(function (response) {
                vm.x = response[0];
                vm.no_address = false;
            }).catch(function () {
                vm.no_address = true;
            });
        }

        // TODO　等待地址问题修复
        function make() {
            return orderservice.makeOrder(vm.cart_list, vm.x.id).then(function (response) {
                $location.path('/order/' + response + '/detail').replace();
            });
        }
    }
})();
(function () {
    'use strict';

    angular.module('index').controller('CollectBookListsCtrl', CollectBookListsCtrl);

    CollectBookListsCtrl.$inject = ['booklists'];

    function CollectBookListsCtrl(booklists) {
        var vm = this;
        vm.booklists = booklists;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('CollectBooksCtrl', CollectBooksCtrl);

    CollectBooksCtrl.$inject = ['bookservice', 'books'];

    function CollectBooksCtrl(bookservice, books) {
        var vm = this;
        vm.books = books;

        vm.remove = remove;

        function remove(book, index) {
            bookservice.discollectBook(book.isbn).then(function () {
                vm.books.splice(index, 1);
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('CommentsCtrl', CommentsCtrl);

    CommentsCtrl.$inject = ['commentservice', 'comments'];

    function CommentsCtrl(commentservice, comments) {
        var vm = this;
        vm.comments = comments;
        vm.title = commentservice.getTitle();

        vm.up = up;
        vm.down = down;

        function up(comment) {
            commentservice.up(comment.id).then(function () {
                comment.down = comment.down_already ? --comment.down : comment.down;
                comment.up_already = !comment.up_already;
                comment.down_already = false;
                comment.up = comment.up_already ? ++comment.up : --comment.up;
            });
        }

        function down(comment) {
            commentservice.down(comment.id).then(function () {
                comment.up = comment.up_already ? --comment.up : comment.up;
                comment.down_already = !comment.down_already;
                comment.up_already = false;
                comment.down = comment.down_already ? ++comment.down : --comment.down;
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('IndexCtrl', IndexCtrl);

    IndexCtrl.$inject = ['hotBooklists', 'slides', 'popularBooks'];

    function IndexCtrl(hotBooklists, slides, popularBooks) {
        var vm = this;
        vm.myInterval = 5000;
        vm.booklists = hotBooklists;
        vm.slides = slides;
        vm.books = popularBooks;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('MeCtrl', MeCtrl);

    MeCtrl.$inject = ['me'];

    function MeCtrl(me) {
        var vm = this;
        vm.user = me;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('NoticesCtrl', NoticesCtrl);

    NoticesCtrl.$inject = ['notices'];

    function NoticesCtrl(notices) {
        var vm = this;
        vm.notices = notices;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('OrderCommentsCtrl', OrderCommentsCtrl);

    OrderCommentsCtrl.$inject = ['$q', '$stateParams', 'orderservice', 'commentservice', 'order'];

    function OrderCommentsCtrl($q, $stateParams, orderservice, commentservice, order) {
        var vm = this;
        vm.order = order;

        vm.comment = comment;

        function comment() {
            var promises = [];
            if (!vm.commentForm.$valid) {
                notie.alert(1, '请填写全部信息', 0.3);
                return;
            } else {
                var _iteratorNormalCompletion14 = true;
                var _didIteratorError14 = false;
                var _iteratorError14 = undefined;

                try {
                    for (var _iterator14 = vm.order.carts[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                        var z = _step14.value;

                        promises.push(commentservice.postComment(z.book.isbn, z.book.star, z.book.content));
                    }
                } catch (err) {
                    _didIteratorError14 = true;
                    _iteratorError14 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion14 && _iterator14.return) {
                            _iterator14.return();
                        }
                    } finally {
                        if (_didIteratorError14) {
                            throw _iteratorError14;
                        }
                    }
                }
            }
            return $q.all(promises).then(function () {
                commentservice.platformComment(vm.stars1, vm.stars2, vm.stars3);
            }).then(function () {
                history.back();
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('OrderDetailCtrl', OrderDetailCtrl);

    OrderDetailCtrl.$inject = ['orderservice', 'order'];

    function OrderDetailCtrl(orderservice, order) {
        var vm = this;
        vm.price = 0;
        vm.status_list = [];

        vm.cancel = cancel;
        vm.receipt = receipt;

        vm.order = order;
        vm.order.status = statusDict[vm.order.status];
        var _iteratorNormalCompletion15 = true;
        var _didIteratorError15 = false;
        var _iteratorError15 = undefined;

        try {
            for (var _iterator15 = vm.order.carts[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                var book = _step15.value;

                vm.price += book.number * book.price;
            }
        } catch (err) {
            _didIteratorError15 = true;
            _iteratorError15 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion15 && _iterator15.return) {
                    _iterator15.return();
                }
            } finally {
                if (_didIteratorError15) {
                    throw _iteratorError15;
                }
            }
        }

        var _iteratorNormalCompletion16 = true;
        var _didIteratorError16 = false;
        var _iteratorError16 = undefined;

        try {
            for (var _iterator16 = vm.order.status_list[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
                var item = _step16.value;

                vm.status_list.push({
                    'status': statusDict[item.status],
                    'content': item.content,
                    'time': item.time
                });
            }
        } catch (err) {
            _didIteratorError16 = true;
            _iteratorError16 = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion16 && _iterator16.return) {
                    _iterator16.return();
                }
            } finally {
                if (_didIteratorError16) {
                    throw _iteratorError16;
                }
            }
        }

        function cancel(order) {
            return orderservice.cancelOrder(order.id).then(function () {
                vm.order.status = '已取消';
                vm.status_list.push({
                    'status': '已取消',
                    'time': Date.parse(new Date()) / 1000
                });
            });
        }

        function receipt(order) {
            return orderservice.receiptOrder(order.id).then(function () {
                vm.status_list.push({
                    'status': '已收货',
                    'time': Date.parse(new Date()) / 1000
                });
                vm.order.status = '待评价';
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('OrderReturnCtrl', OrderReturnCtrl);

    OrderReturnCtrl.$inject = ['orderservice', 'order'];

    function OrderReturnCtrl(orderservice, order) {
        var vm = this;
        vm.order = order;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('OrdersCtrl', OrdersCtrl);

    OrdersCtrl.$inject = ['$stateParams', 'orderservice', 'orders'];

    function OrdersCtrl($stateParams, orderservice, orders) {
        var vm = this;
        vm.type = $stateParams.status;
        vm.orders = orders;
        var status = ['pending', 'all', 'commenting', 'waiting', 'return', 'done'];

        vm.cancelReturn = cancelReturn;
        vm.cancel = cancel;
        vm.receipt = receipt;

        if (status.indexOf(vm.type) === -1) {
            history.back();
        } else {
            vm.type2 = statusDict[vm.type];
        }

        // TODO 取消售后
        function cancelReturn(order) {}

        function cancel(order) {
            return orderservice.cancelOrder(order.id).then(function () {
                order.status = '已取消';
            });
        }

        function receipt(order) {
            return orderservice.receiptOrder(order.id).then(function () {
                order.status = '待评价';
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('PointCtrl', PointCtrl);

    PointCtrl.$inject = ['points'];

    function PointCtrl(points) {
        var vm = this;
        vm.points = points;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('PopularMoreCtrl', PopularMoreCtrl);

    PopularMoreCtrl.$inject = ['booklists'];

    function PopularMoreCtrl(booklists) {
        var vm = this;
        vm.booklists = booklists;
        vm.booklists.nextPage();
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('RecommendMoreCtrl', RecommendMoreCtrl);

    RecommendMoreCtrl.$inject = ['books'];

    function RecommendMoreCtrl(books) {
        var vm = this;
        vm.books = books;
        vm.books.nextPage();
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('AddressCtrl', AddressCtrl);

    AddressCtrl.$inject = ['$state', 'userservice', 'address'];

    function AddressCtrl($state, userservice, address) {
        var vm = this;
        vm.address = address;

        vm.edit = edit;
        vm.back = back;

        function edit(x) {
            vm.edit = function () {
                userservice.setAddress(x);
                $state.go('AddressAdd');
            };
        }

        function back() {
            history.back();
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('AddressAddCtrl', AddressAddCtrl);

    AddressAddCtrl.$inject = ['userservice'];

    function AddressAddCtrl(userservice) {
        var vm = this;
        vm.data = userservice.getAddress();

        if (vm.data === null) {
            vm.edit = false;
        } else {
            vm.phone = vm.data.phone;
            vm.dormitory = vm.data.dormitory;
            vm.name = vm.data.name;
            vm.id = vm.data.id;
            vm.edit = true;
            userservice.setAddress(null);
        }

        vm.addAddress = addAddress;
        vm.updateAddress = updateAddress;
        vm.deleteAddress = deleteAddress;
        vm.setDefaultAddress = setDefaultAddress;
        vm.back = back;

        function updateAddress() {
            if (!checkForm()) return false;
            return userservice.updateUserAddress(vm.name, vm.phone, vm.dormitory, vm.id).then(function () {
                vm.back();
            });
        }

        function addAddress() {
            if (!checkForm()) return false;
            return userservice.addUserAddress(vm.name, vm.phone, vm.dormitory).then(function () {
                vm.back();
            });
        }

        function deleteAddress(id) {
            return userservice.deleteUserAddress(id).then(function () {
                vm.back();
            });
        }

        function setDefaultAddress(id) {
            return userservice.setUserDefaultAddress(vm.name, vm.phone, vm.dormitory, id).then(function () {
                vm.back();
            });
        }

        function back() {
            history.back();
        }

        function checkForm() {
            if (!+vm.addressForm.phone.$viewValue) {
                vm.correct_phone = true;
                notie.alert(1, '手机信息有误', 0.3);
                return false;
            }
            if (vm.addressForm.$invalid) {
                if (vm.addressForm.name.$invalid) {
                    vm.correct_name = true;
                    notie.alert(1, '收货人信息有误', 0.3);
                } else if (vm.addressForm.phone.$invalid) {
                    vm.correct_phone = true;
                    notie.alert(1, '手机信息有误', 0.3);
                } else if (vm.addressForm.dorm.$invalid) {
                    vm.correct_dorm = true;
                    notie.alert(1, '宿舍信息有误', 0.3);
                }
                return false;
            } else {
                return true;
            }
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('SettingsCtrl', SettingsCtrl);

    SettingsCtrl.$inject = ['user'];

    function SettingsCtrl(user) {
        var vm = this;
        vm.user = user;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('SuggestCtrl', SuggestCtrl);

    SuggestCtrl.$inject = ['userservice', '$timeout', 'user'];

    function SuggestCtrl(userservice, $timeout, user) {
        var vm = this;
        vm.user = user;

        vm.post = post;

        function post() {
            if (vm.suggestion === void 0 || vm.suggestion == '') {
                return;
            }
            return userservice.postSuggestion(vm.suggestion).then(function () {
                notie.alert(1, '谢谢您的反馈！', 0.3);
                $timeout(function () {
                    history.back();
                }, 300);
            });
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('TagBooklistsCtrl', TagBooklistsCtrl);

    TagBooklistsCtrl.$inject = ['$stateParams', 'booklistservice', 'booklists'];

    function TagBooklistsCtrl($stateParams, booklistservice, booklists) {
        var vm = this;
        vm.booklists = booklists;
        vm.booklists.nextPage();

        vm.timeOrder = timeOrder;
        vm.collectOrder = collectOrder;

        function timeOrder() {
            vm.booklists = new booklistservice.getBooklists('time', $stateParams.tag);
            vm.booklists.nextPage();
        }

        function collectOrder() {
            vm.booklists = new booklistservice.getBooklists('collect', $stateParams.tag);
            vm.booklists.nextPage();
        }
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('TagsCtrl', TagsCtrl);

    TagsCtrl.$inject = ['tags'];

    function TagsCtrl(tags) {
        var vm = this;
        vm.allTags = tags;
    }
})();

(function () {
    'use strict';

    angular.module('index').controller('UserCommentsCtrl', UserCommentsCtrl);

    UserCommentsCtrl.$inject = ['userservice', 'commentservice'];

    function UserCommentsCtrl(userservice, commentservice) {
        var vm = this;
        vm.deleteBox = false;
        vm.edit = false;
        vm.readonly = true;

        vm.focus = focus;
        vm.submit = submit;
        vm.delete = deleteComment;

        getUserComments();

        function getUserComments() {
            userservice.getUserComments().then(function (response) {
                vm.comments = response;
                var _iteratorNormalCompletion17 = true;
                var _didIteratorError17 = false;
                var _iteratorError17 = undefined;

                try {
                    for (var _iterator17 = vm.comments[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {
                        var comment = _step17.value;

                        comment.readonly = true;
                        comment.deleteBox = false;
                    }
                } catch (err) {
                    _didIteratorError17 = true;
                    _iteratorError17 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion17 && _iterator17.return) {
                            _iterator17.return();
                        }
                    } finally {
                        if (_didIteratorError17) {
                            throw _iteratorError17;
                        }
                    }
                }
            });
        }

        function focus(comment) {
            comment.readonly = false;
            comment.edit = true;
        }

        function submit(comment) {
            if (comment.content === void 0 || comment.content == '') {
                return;
            }
            return commentservice.editComment(comment.id, comment.star, comment.content).then(function () {
                comment.readonly = true;
                comment.edit = false;
            });
        }

        function deleteComment(comment) {
            return commentservice.deleteComment(comment.id).then(function () {
                vm.comments.splice(vm.comments.indexOf(comment), 1);
                vm.deleteBox = false;
            });
        }
    }
})();
;(function(){

'use strict';

angular.module('index').run(['$templateCache', function($templateCache) {

  $templateCache.put('book/book_core_part.html', '<div class="book-intro"><span>简介</span><p ng-bind-html="vm.book.description" ng-class="{\'book-intro-less\':!vm.more,\'book-intro-more\':vm.more}"></p><span ng-show="!vm.more" ng-click="vm.more=!vm.more">更多</span> <span ng-show="vm.more" ng-click="vm.more=!vm.more">收起</span></div><div class="book-comments"><span>评论</span><div ng-if="vm.book.comments.length == 0"><p class="text-center">征集评论</p></div><div ng-repeat="comment in vm.book.comments" ng-if="book.comments.length != 0"><comment-row comment="comment" up="vm.up" down="vm.down"></comment-row></div><div class="book-comments-more"><a class="btn btn-default" ui-sref="commentsBook({isbn: vm.book.isbn, title: vm.book.title})">全部评论</a> <button class="btn btn-default" ng-click="vm.commentBox=!vm.commentBox;">我要评论</button></div><form name="commentForm" class="book-comment-box" ng-if="vm.commentBox"><div class="book-comment-origin"><img ng-src="{{vm.user.avatar}}"> <span class="book-comment-origin">{{vm.user.username}}</span><uib-rating class="star red-star" state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'" ng-model="vm.star" max="5" read-only="false"></uib-rating></div><textarea ng-model="vm.content" focus-me="{{vm.commentBox}}" name="content" class="form-control" rows="3" ng-required="true"></textarea><div class="book-comment-post"><p>评价 "{{vm.book.title}}"</p><button class="btn btn-success" type="submit" ng-click="vm.postComment()" promise-btn>发表</button></div></form></div>');

  $templateCache.put('book/book_head_part.html', '<div class="book-image"><img class="cover" ng-src="{{vm.book.image}}"> <img class="cover-bg" ng-src="{{vm.book.image}}"></div><div class="book-info"><h3>{{vm.book.title}}</h3><div class="book-info-rate"><uib-rating class="star wechat-fix" ng-model="vm.book.star" max="5" read-only="true" state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'"></uib-rating><span class="rate">{{vm.book.rate | number:1 }}</span> <span class="collect">({{vm.book.commenters}}人评价)</span> <a class="book-info-more-option" ui-sref="bookDetail({isbn: vm.book.isbn})"><i class="fa fa-chevron-right"></i></a></div><div class="book-info-basic"><span class="author" ng-if=\'vm.book.author!=""\'><span ng-repeat="x in vm.book.author track by $index">{{x}}</span>/</span> <span class="publisher" ng-if=\'vm.book.publisher!=""\'>{{book.publisher}} /</span> <span class="publish_time" ng-if=\'vm.book.publish_time!=""\'>{{book.publish_time}}</span></div></div>');

  $templateCache.put('book/book_other_part.html', '<div class="books-similarity" ng-if="vm.similarbooks.length != 0"><span>购买此书的人最近也购买</span><book-slide books="vm.similarbooks"></book-slide></div><div class="booklists-box" ng-if="vm.booklists.length != 0"><span>被以下书单收录</span><booklist-row booklists="vm.booklists"></booklist-row></div>');

  $templateCache.put('book/book_section_part.html', '<span name="price">¥ {{vm.book.price | number:2 }}</span> <button class="btn btn-success" ng-click="vm.collect()" promise-btn><i ng-if="!vm.book.collect_already" class="fa fa-bookmark-o"></i> <i ng-if="vm.book.collect_already" class="fa fa-bookmark"></i> <i>收藏</i></button> <button class="btn btn-danger" ng-click="vm.addCart()" promise-btn><i class="fa fa-cart-plus"></i> <i>加入购物车</i></button>');

  $templateCache.put('book/book_tpl.html', '<div class="book-page"><div class="book-detail"><div class="book-head" ng-include="\'book/book_head_part.html\'"></div><div class="book-section" ng-include="\'book/book_section_part.html\'"></div><div class="book" ng-include="\'book/book_core_part.html\'"></div><div ng-include="\'book/book_other_part.html\'"></div></div></div>');

  $templateCache.put('book_info/book_info_tpl.html', '<div class="book-info-page"><div class="book"><header>出版信息</header><article><section><span class="info" ng-if=\'vm.book.title!=""\'>标题: {{vm.book.title}}</span> <span class="info" ng-if=\'vm.book.subtitle!=""\'>副标题: {{vm.book.subtitle}}</span> <span class="info" ng-if=\'vm.book.origin_title!=""\'>原标题: {{vm.book.origin_title}}</span> <span class="info" ng-if=\'vm.book.author!=""\'>作者：<span ng-repeat="x in vm.book.author">{{x}}</span></span> <span class="info" ng-if="vm.book.translator" !>译者: <span ng-repeat="x in vm.book.translator">{{x}}</span></span> <span class="info" ng-if=\'vm.book.publisher!=""\'>出版社: {{vm.book.publisher}}</span> <span class="info" ng-if=\'vm.book.publish_time!=""\'>出版年: {{vm.book.publish_time}}</span> <span class="info" ng-if="!vm.book.page">页数: {{vm.book.page}}</span> <span class="info" ng-if=\'vm.book.price!=""\'>定价: {{vm.book.price}}</span> <span class="info" ng-if=\'vm.book.binding!=""\'>装帧: {{vm.book.binding}}</span> <span class="info" ng-if=\'vm.book.isbn!=""\'>ISBN: {{vm.book.isbn}}</span></section></article></div><div class="book" ng-if=\'vm.book.description!=""\'><header>书籍内容介绍</header><article><section><p class="info" ng-bind-html="vm.book.description"></p></section></article></div><div class="book" ng-if=\'vm.book.author_intro!=""\'><header>作者介绍</header><article><section><p class="info" ng-bind-html="vm.book.author_description"></p></section></article></div><div class="book" ng-if=\'vm.book.catelog!=""\'><header>目录</header><article><section><p class="info" ng-bind-html="vm.book.catelog"></p></section></article></div></div>');

  $templateCache.put('booklist/booklist_head_part.html', '<div class="booklist-header"><img class="booklist-image-cover" ng-src="{{vm.booklist.image}}"><h3>{{vm.booklist.title}}</h3><p class="booklist-intro">{{vm.booklist.description}}</p><img class="avatar" ng-src="{{vm.booklist.author.avatar}}"> <small>{{vm.booklist.author.name}}</small></div><div class="tags"><div class="tags-outer"><div class="tags-inner"><span class="tag">标签</span> <a class="tag" ng-repeat="tag in vm.booklist.tags track by $index" ui-sref="tagBooklists({tag: tag})">{{tag}}</a></div></div></div>');

  $templateCache.put('booklist/booklist_tpl.html', '<div class="booklist-page"><div ng-include="\'booklist/booklist_head_part.html\'"></div><div class="books"><a class="book" ng-repeat="book in vm.booklist.books track by book.isbn" ui-sref="book({isbn: book.isbn})"><div class="book-image"><img class="cover cover-sm" ng-src="{{book.image}}"> <img class="cover-bg" ng-src="{{book.image}}"></div><div class="book-info"><div class="book-info-top"><span class="title">{{book.title}}</span><div class="rate"><span>&nbsp;{{book.rate}}</span><uib-rating class="red-star wechat-fix" ng-model="book.star" max="5" read-only="true" state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'"></uib-rating></div></div><span class="author" ng-if=\'book.author!=""\'><span ng-repeat="x in book.author track by $index">{{x}}</span></span></div><div class="reason"><p ng-bind-html="book.reason"></p></div></a></div><div class="btn-bottom"><button class="btn" ng-click="vm.collect()" promise-btn><i ng-if="!vm.booklist.collect_already" class="fa fa-bookmark-o"></i> <i ng-if="vm.booklist.collect_already" class="fa fa-bookmark"></i> {{vm.booklist.collect}}</button> <button class="btn" ng-click="vm.love()" promise-btn><i ng-if="!vm.booklist.love_already" class="fa fa-heart-o"></i> <i ng-if="vm.booklist.love_already" class="fa fa-heart"></i> {{vm.booklist.love}}</button> <button class="btn" ui-sref="booklistComments(vm.booklist.id)" promise-btn><i class="fa fa-comment-o"></i> {{vm.booklist.collect}}</button></div></div>');

  $templateCache.put('booklist_comments/booklist_comments_tpl.html', '<div class="booklist-comment-page"><top-bar title="vm.title"></top-bar><div class="book-comment" ng-repeat="comment in vm.comments"><comment-row comment="comment" up="vm.up" down="vm.down"></comment-row></div><form name="commentForm" class="book-comment-box" ng-if="vm.commentBox"><div class="book-comment-origin"><img ng-src="{{vm.user.avatar}}"> <span class="book-comment-origin">{{vm.user.username}}</span><uib-rating class="star red-star" state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'" ng-model="vm.star" max="5" read-only="false"></uib-rating></div><textarea ng-model="vm.content" focus-me="{{vm.commentBox}}" name="content" class="form-control" rows="3" ng-required="true"></textarea><div class="book-comment-post"><button class="btn btn-success btn-block" type="submit" ng-click="vm.postComment()" promise-btn>发表</button></div></form><div class="btn-bottom" ng-if="!vm.commentBox"><button class="btn btn-success btn-block" style="border-radius: 0" ng-click="vm.commentBox = !vm.commentBox">评论</button></div></div>');

  $templateCache.put('booklists/booklists_slides_part.html', '<div class="booklists"><div class="btn-group order"><button class="btn btn-default" ng-click="vm.timeOrder()">时间优先</button> <button class="btn btn-default" ng-click="vm.collectOrder()">收藏优先</button></div><booklist-row booklists="vm.booklists.list" scroll="vm.booklists"></booklist-row></div>');

  $templateCache.put('booklists/booklists_tpl.html', '<div class="booklists-page"><div class="tags"><div class="tags-header"><p>选书单</p><a ui-sref="tags">查看全部标签 ></a></div><div class="tags-list"><a class="btn btn-default tag" ng-repeat="tag in vm.tags track by $index" ui-sref="tagBooklists({tag: tag})">{{tag}}</a></div></div><div ng-include="\'booklists/booklists_slides_part.html\'"></div></div>');

  $templateCache.put('cart/cart_core_part.html', '<ul class="cart-list"><li class="book" ng-repeat="item in vm.items" ng-if="!item.deleted"><div class="shop-cart-item"><div class="checkbox"><label><span ng-class="{true: \'active\', false: \'\'}[item.checked]"><input type="checkbox" ng-model="item.checked" ng-click="vm.recount()"></span></label></div><a class="book-image" ui-sref="book({isbn: item.book.isbn})"><img ng-src="{{item.book.image}}"></a><div class="book-title"><a ui-sref="book({isbn: item.book.isbn})">{{item.book.title}}</a></div><p class="book-price">¥ {{item.price | number:2 }}</p><span class="book-count" ng-if="!vm.editStatu">X {{ item.number }}</span><div class="book-edit" ng-if="vm.editStatu"><i class="fa fa-trash-o fa-1x" ng-click="vm.removeBook(item)"></i><div class="book-edit-count"><i class="fa fa-minus" ng-click="vm.minus(item)"></i> <input type="number" ng-model="item.number" ng-change="vm.editBook(item)"> <i class="fa fa-plus" ng-click="vm.plus(item)"></i></div></div></div></li></ul>');

  $templateCache.put('cart/cart_tpl.html', '<div class="cart-page"><div class="cart-head"><span>购物车</span> <span ng-click="vm.edit()" ng-if="!vm.editStatu">编辑</span> <span ng-click="vm.editOk()" ng-if="vm.editStatu">完成</span></div><div ng-include="\'cart/cart_core_part.html\'"></div><div class="cart-to-order"><button class="btn btn-danger" ng-if="!vm.editStatu" ng-disabled="vm.count===0 || vm.editStatu" ng-click="vm.cart2order()">结算({{vm.count}})</button> <button class="btn btn-info" ng-if="vm.editStatu" ng-disabled="vm.count===0" promise-btn ng-click="vm.collect()">移入收藏夹({{vm.number}})</button> <button class="btn btn-success" ng-if="vm.editStatu" ng-disabled="vm.count===0" promise-btn ng-click="vm.removeBooks()">删除({{vm.number}})</button><div class="checkbox"><label><span ng-class="{true: \'active\', false: \'\'}[vm.checked]"><input type="checkbox" ng-model="vm.checked" ng-click="vm.selectAll()"></span></label> <label>全选</label></div><div class="cart-count" ng-if="!vm.editStatu"><label>¥ {{vm.price | number: 2}}</label></div></div></div>');

  $templateCache.put('cart2order/cart2order_tpl.html', '<div class="cart2order-page"><div class="cart2order"><div class="order-list"><div class="order"><div class="order-title"><span class="order-head">Bookist</span> <span class="order-status">待支付</span></div><div class="order-cart"><div class="colorBar"></div><div class="order-address rarrow" ui-sref="address()"><p class="name" ng-if="vm.x">收货人:{{vm.x.name}}<em>{{vm.x.phone}}</em></p><p class="address" ng-if="vm.x">收货地址:{{vm.x.dormitory}}</p><p class="empty" ng-if="!vm.x">你还没有添加地址信息</p></div><div class="colorBar"></div><div class="order-books"><div class="cart2order-book order-book" ng-repeat="item in vm.books"><img ng-src="{{item.book.image}}"></div><div class="cart2order-sum"><p>共{{vm.order.number}}件</p><p>小计: <span>¥ {{vm.order.price | number:2}}</span></p></div></div><div class="order-tip"><div class="order-tip-1"><span>送货方式</span> <span>送书上门</span></div><div class="order-tip-1"><span>付款方式</span> <span>货到付款</span></div></div></div></div><div class="cart-message"><p>庄瑞铭到次一游！</p></div></div></div><div class="make-order"><button class="btn btn-danger" ng-disabled="vm.no_address" promise-btn ng-click="vm.make()">提交订单</button><div class="cart-count"><label>总额: ¥ {{vm.order.price | number: 2}}</label></div></div></div>');

  $templateCache.put('collect_booklists/collect_booklists_tpl.html', '<div class="collect-booklists-page"><div ng-include="\'collect_booklists/collect_switch_part.html\'"></div><booklist-row booklists="vm.booklists"></booklist-row></div>');

  $templateCache.put('collect_booklists/collect_switch_part.html', '<div class="switch btn-group"><a class="btn btn-default" ui-sref="booklistsCollect">书单收藏夹</a> <a class="btn btn-default" ui-sref="booksCollect">书籍收藏夹</a></div>');

  $templateCache.put('collect_books/collect_books_tpl.html', '<div class="collect-books-page"><div ng-include="\'collect_booklists/collect_switch_part.html\'"></div><div class="books"><book-row books="vm.books"></book-row></div></div>');

  $templateCache.put('comments/comments_tpl.html', '<div class="comments-page"><top-bar title="vm.title"></top-bar><div class="book-comment" ng-repeat="comment in vm.comments track by $index"><comment-row comment="comment" up="vm.up" down="vm.down"></comment-row></div></div>');

  $templateCache.put('index/index_slides_part.html', '<div class="slides"><uib-carousel active="0" interval="vm.myInterval" no-wrap="false" no-pause="true"><uib-slide ng-repeat="slide in vm.slides track by $index" index="slide.id"><img ng-src="{{slide.image}}"></uib-slide></uib-carousel></div>');

  $templateCache.put('index/index_tpl.html', '<div class="index-page"><div ng-include="\'index/index_slides_part.html\'"></div><div class="books"><div class="books-header"><i class="fa fa-book"></i> <span>书籍推荐</span> <a ui-sref="recommend">更多 ></a></div><book-slide books="vm.books"></book-slide></div><div class="booklists" style="min-height: 400px;"><div class="booklists-header"><i class="fa fa-list"></i> <span>热门书单</span> <a ui-sref="popular">更多 ></a></div><booklist-row booklists="vm.booklists"></booklist-row></div></div>');

  $templateCache.put('me/me_tpl.html', '<div class="me"><div class="user"><img ui-sref="settings" ng-src="{{vm.user.avatar}}"><div ui-sref="settings" class="user-name"><p>{{vm.user.username}}</p></div><a ui-sref="settings"><i class="fa fa-cog fa-lg"></i></a> <a ui-sref="notices"><i class="fa fa-envelope-o fa-lg"></i></a></div><div class="order-panel"><div class="order-head user-item" ui-sref="orders({status:\'all\'})"><i class="fa fa-ticket"></i>全部订单</div><a ui-sref="orders({status:\'pending\'})" class="order-bar-split"><img src="/static/images/pending.png"> <span>待发货</span></a> <a ui-sref="orders({status:\'waiting\'})" class="order-bar-split"><img src="/static/images/waiting.png"> <span>待收货</span></a> <a ui-sref="orders({status:\'commenting\'})" class="order-bar-split"><img src="/static/images/commenting.png"> <span>待评价</span></a> <a ui-sref="orders({status:\'return\'})" class="order-bar-split"><img src="/static/images/return.png"> <span>退款/售后</span></a></div><div class="user-items"><a ui-sref="booklistsCollect" class="user-item"><i class="fa fa-folder"></i>收藏</a> <a ui-sref="comments" class="user-item"><i class="fa fa-comments"></i>评论</a> <a ui-sref="point" class="user-item"><i class="fa fa-ticket"></i>积分</a></div><div class="user-items"><a ui-sref="suggest" class="user-item"><i class="fa fa-commenting"></i>反馈</a></div></div>');

  $templateCache.put('navbar/navbar_tpl.html', '<nav class="bookist-nav navbar navbar-default" role="navigation"><ul class="nav navbar-nav"><li ui-sref-active="active"><a ui-sref="index"><i class="fa fa-home fa-lg"></i><p>首页</p></a></li><li ui-sref-active="active"><a ui-sref="booklists"><i class="fa fa-th-large fa-lg"></i><p>书单</p></a></li><li ui-sref-active="active"><a ui-sref="cart"><i class="fa fa-shopping-cart fa-lg"></i><p>购物车</p></a></li><li ui-sref-active="active"><a ui-sref="me"><i class="fa fa-user fa-lg"></i><p>我的</p></a></li></ul></nav>');

  $templateCache.put('notices/notices_tpl.html', '<ul class="notices"><div class="empty-alert" ng-if="vm.notices.length==0"><p>暂无消息</p></div><li class="notice" ng-repeat="notice in vm.notices"><div class="notice-title"><p ng-bind-html="notice.content"></p><span>{{notice.time*1000 | date:\'yyyy-MM-dd HH:mm\' }}</span></div><p class="notice-content">{{notice.content}}</p><a class="notice-read" ng-href="url"><span>查看</span> <i class="fa fa-chevron-right"></i></a></li></ul>');

  $templateCache.put('order_comments/order_comments_tpl.html', '<div class="order-comments-page"><div class="order-group"><form name="vm.commentForm" class="order-list-one"><div class="order-title"><span class="order-head">订单详细信息</span> <span class="order-status">建议您把书看完再来评价书籍哦~</span></div><ul class="order-books order-comments"><li class="order-book" ng-repeat="z in vm.order.carts"><a ui-sref="book({isbn: z.book.isbn})" class="order-img"><img ng-src="{{z.book.image}}"></a><div class="order-comment"><textarea class="form-control" ng-model="z.book.content" rows="3" placeholder="认真评价可以获得积分哦~" required></textarea></div><div class="order-star"><comment-star title="书籍评分" stars="z.book.star"></comment-star></div></li></ul><div class="platform-comment"><div class="platform-comment-title"><span class="order-head">平台评分</span></div><ul class="platform-comment-items"><li><comment-star title="购书体验" stars="vm.stars1"></comment-star></li><li><comment-star title="物流服务" stars="vm.stars2"></comment-star></li><li><comment-star title="服务态度" stars="vm.stars3"></comment-star></li></ul></div><div class="order-comment-fix-bottom"><button class="btn btn-danger" ng-click="vm.comment()" promise-btn>发表评价</button></div></form></div></div>');

  $templateCache.put('order_detail/order_detail_tpl.html', '<div class="order-detail-page"><div class="order-group"><ul class="order-list"><li class="order-list-one"><div class="order-title"><span class="order-head">订单详细信息</span> <span class="order-status">共{{vm.price}}元</span></div><ul class="order-books"><a class="order-book" ng-repeat="z in vm.order.carts" ui-sref="book({isbn: z.book.isbn})"><img ng-src="{{z.book.image}}"><p>{{z.book.title}}</p><small ng-repeat="x in z.book.author"><small>{{x}}</small></small> <span class="count">{{z.number}}本 / 共{{z.price*z.number | number:2}}元</span></a></ul><div class="order-detail"><div class="order-title"><span class="order-head">订单状态</span> <span class="order-status">{{vm.order.status}}</span></div><ul class="order-process"><li ng-repeat="x in vm.status_list track by $index"><span>{{x.status}}</span> <span>{{x.time*1000 | date:\'yyyy-MM-dd HH:mm\'}}</span></li></ul></div><div class="order-receipt"><div class="order-title"><span class="order-head">订单收货信息</span></div><div class="order-receipt-meta"><p>收货人: {{vm.order.address.name}}</p><p>联系电话: {{vm.order.address.phone}}</p><p>收货地址: {{vm.order.address.dormitory}}</p></div></div><div class="order-detail-clear"></div><div class="order-meta order-meta-fix-bottom"><div class="order-meta-price"><span class="order-price">货到付款&nbsp;&nbsp;&nbsp;<em>{{vm.price}}</em> 元</span></div><a class="btn btn-danger" ng-if="vm.order.status==\'待评价\'" style="width: 95px;" ui-sref="orderComments({id: vm.order.id})">评价</a> <button class="btn btn-danger" ng-if="vm.order.status==\'待收货\'" ng-click="vm.receipt(vm.order)">确认收货</button> <button class="btn btn-danger" promise-btn ng-if="vm.order.status==\'待发货\'" ng-click="vm.cancel(vm.order)">取消订单</button> <button class="btn btn-danger" ng-if="vm.order.status==\'已取消\'" style="width: 95px;" disabled>已取消</button></div></li></ul></div></div>');

  $templateCache.put('order_return/order_return_tpl.html', '<div class="order-return-page"><div class="head"><p>订单退换货申请</p></div><div class="contain"><ul class="list-group"><li class="list-group-item" ng-repeat="z in vm.order.carts"><img ng-src="z.book.image"><p>{{z.book.title}}</p><span>{{z.number}}本 / 共{{z.price*z.number | number:2}}元</span></li></ul></div></div>');

  $templateCache.put('orders/orders_tpl.html', '<div class="order-page"><div class="order-group"><p class="empty" ng-if="vm.orders.length === 0"><i class="fa fa-rocket" aria-hidden="true"></i> 您还没有{{vm.type2}}订单</p><ul class="order-list"><li class="order-list-one" ng-repeat="order in vm.orders"><div class="order-title"><span class="order-head">Bookist</span> <span class="order-status">{{order.status}}</span></div><a ui-sref="orderDetail({id:order.id})"><ul class="order-books" style="margin-bottom: 0"><li class="order-book" ng-repeat="z in order.carts"><img ng-src="{{z.book.image}}"><p>{{z.book.title}}</p><small ng-repeat="x in z.book.author"><small>{{x}}</small></small> <span class="count">{{z.number}}本 / 共{{z.price*z.number | number:2}}元</span></li></ul></a><div class="order-meta"><div class="order-meta-price"><span class="order-price">货到付款&nbsp;&nbsp;&nbsp;<em>{{order.price}}</em> 元</span></div><a class="btn btn-danger" ng-if="order.status==\'待评价\'" ui-sref="orderComments({id: order.id})">评价</a> <button class="btn btn-danger" promise-btn ng-if="order.status==\'待收货\'" ng-click="vm.receipt(order)">确认收货</button> <button class="btn btn-danger" promise-btn ng-if="order.status==\'待发货\'" ng-click="vm.cancel(order)">取消订单</button> <button class="btn btn-danger" ng-if="order.status==\'已取消\'" disabled>已取消</button> <a class="btn btn-danger" ng-if="vm.type==\'return\'" style="width: 82px;" ui-sref="orderReturn({id: order.id})">退换货</a></div></li></ul></div></div>');

  $templateCache.put('point/point_tpl.html', '<div class="points"><div class="point-history"><div class="point-header"><span>当前积分: {{vm.points.now_points}}</span></div><ul class="point-list"><li ng-repeat="x in vm.points.logs"><span class="point-title" ng-bind-html="x.content"></span> <span class="point-result" ng-if="x.point>0">+ {{x.point}}</span> <span class="point-result" ng-if="x.point<0">- {{-x.point}}</span></li></ul></div></div>');

  $templateCache.put('popular_more/popular_more_tpl.html', '<div class="popular-more-page"><booklist-row booklists="vm.booklists.list" scroll="vm.booklists"></booklist-row></div>');

  $templateCache.put('recommend_more/recommend_more_tpl.html', '<div class="recommend-more-page" style="overflow: hidden;"><book-row books="vm.books.list" scroll="vm.book"></book-row></div>');

  $templateCache.put('setting_address/setting_address_tpl.html', '<div class="setting-address-page"><div class="address-list" ng-repeat="x in vm.address" ng-click="vm.edit(x)"><p>{{x.name}}, {{x.phone}}</p><small>{{x.dormitory}}</small> <span ng-if="x.is_default">默认地址</span></div><div class="btn-group"><button class="btn btn-success" ui-sref="AddressAdd">添加</button> <button class="btn btn-default" ng-click="vm.back()">返回</button></div></div>');

  $templateCache.put('setting_address_add/setting_address_add_tpl.html', '<div class="setting"><form name="vm.addressForm"><div class="form-group"><label>收货人</label> <input type="text" name="name" maxlength="10" ng-required="true" ng-model="vm.name" class="form-control" placeholder="姓名"></div><div class="form-group"><label>手机号码</label> <input type="tel" name="phone" ng-model="vm.phone" class="form-control" placeholder="11位手机号" my-maxlength="11" ng-required="true" ng-minlength="11" ng-maxlength="11" minlength="11" maxlength="11"></div><div class="form-group"><label>宿舍地址</label> <input type="text" name="dorm" ng-model="vm.dormitory" maxlength="30" class="form-control" ng-required="true" placeholder="宿舍位置"></div><div class="btn-group"><button class="btn btn-success" promise-btn ng-if="!vm.edit" ng-click="vm.addAddress()">添加</button> <button class="btn btn-success" promise-btn ng-if="vm.edit" ng-click="vm.updateAddress()">修改</button> <button class="btn btn-danger" promise-btn ng-if="vm.edit" ng-click="vm.deleteAddress(vm.id)">删除</button> <button class="btn btn-info" promise-btn ng-if="vm.edit" ng-click="vm.setDefaultAddress(vm.id)">设置为默认地址</button> <button class="btn btn-default" ng-click="vm.back()">返回</button></div></form></div>');

  $templateCache.put('settings/settings_tpl.html', '<div class="settings-page"><div class="user-items"><a class="user-item"><i class="fa fa-folder user-item-gravatar"><span>头像</span></i> <img ng-src="{{vm.user.avatar}}"></a> <a class="user-item"><i class="fa fa-comments"><span>昵称</span></i> <span>{{vm.user.username}}</span></a></div><div class="user-items"><a class="user-item"><i class="fa fa-cloud"><span>性别</span></i> <i class="fa fa-mars" aria-hidden="true" ng-if="vm.user.sex === 1"></i> <i class="fa fa-venus" aria-hidden="true" ng-if="vm.user.sex === 2"></i></a> <a ui-sref="address" class="user-item"><i class="fa fa-commenting"><span>我的地址</span></i></a></div></div>');

  $templateCache.put('suggest/suggest_tpl.html', '<div class="suggest"><div class="i-suggest"><div class="suggest-header"><h4><i class="fa fa-rocket" aria-hidden="true"></i> 说出你的建议和看法帮助改善平台</h4></div><hr><div class="input-group"><img ng-src="{{vm.user.avatar}}"></div><form class="suggestion" name="vm.suggestBox"><textarea class="form-control" name="suggestion" required autofocus ng-model="vm.suggestion"></textarea> <input type="submit" class="btn btn-block btn-info" promise-btn ng-click="vm.post()"></form></div></div>');

  $templateCache.put('tag-booklists/tag-booklists_tpl.html', '<div class="tags-booklists-page"><div ng-include="\'booklists/booklists_slides_part.html\'"></div></div>');

  $templateCache.put('tags/tags_tpl.html', '<div class="tags-page"><span>全部标签</span><div class="tags-group" ng-repeat="oneTags in vm.allTags"><div class="tags-group-one"><p>{{oneTags.title}}</p><a class="btn btn-default" ng-repeat="tag in oneTags.tags" ui-sref="tagBooklists({tag: tag})">{{tag}}</a></div></div></div>');

  $templateCache.put('user_comments/user_comments_tpl.html', '<div class="user-comments-page"><ul class="comments"><li ng-repeat="comment in vm.comments track by $index"><div class="comment-title"><div class="comment-action"><i class="fa fa-trash-o" ng-click="comment.deleteBox=true"></i> <i class="fa fa-pencil-square-o" ng-click="vm.focus(comment)"></i></div><p>{{comment.book.title}}</p></div><form name="commentForm" class="comment-book"><a ui-sref="book({isbn:comment.book.isbn})"><img ng-src="{{comment.book.image}}"></a><div class="comment-content"><textarea class="form-control" rows="3" name="content" ng-required="true" ng-model="comment.content" ng-bind-html="comment.content" ng-readonly="comment.readonly" focus-me="{{comment.edit}}"></textarea></div><div class="comment-star"><i class="fa fa-thumbs-o-up comment-up">{{comment.up}}</i> <i class="fa fa-thumbs-o-down comment-down">{{comment.down}}</i> <button ng-if="comment.edit" class="btn btn-success" promise-btn ng-click="vm.submit(comment)">确认修改</button><uib-rating ng-model="comment.star" max="5" read-only="!comment.edit" class="red-star star" ng-class="{true: \'comment-star-left\'}[comment.edit]" state-on="\'fa fa-star\'" state-off="\'fa fa-star-o\'"></uib-rating></div></form><delete-box content="comment" commit="vm.delete(comment)" cancel="comment.deleteBox" ng-if="comment.deleteBox"></delete-box></li></ul></div>');

}]);

})();